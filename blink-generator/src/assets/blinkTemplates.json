{
    "swap": {
      "html": "<style> .editBox { width: 300px; height: 200px; display: flex; align-items: center; justify-content: center; border-radius: 10px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); background-color: #ffffff; padding: 20px; flex-direction: column; } .text { font-family: Arial, sans-serif; font-size: 1.5em; color: black; margin-bottom: 10px; } .inputField, .button { width: 100%; padding: 10px; font-size: 1em; border-radius: 5px; border: 1px solid #ccc; margin-bottom: 10px; } .button { background-color: black; color: white; cursor: pointer; } .button:hover { background-color: #45a049; }</style><div class=\"editBox\"><h2 class=\"text\">Swap DAI to USDC</h2><p>Swap tokens using Uniswap V2</p><input placeholder=\"Enter amount...\" type=\"text\" id=\"input\" class=\"inputField\"><p id=\"expectedOutputAmount\"></p><button id=\"dugme\" class=\"button\">Swap</button></div>",
      "js": "const fromToken = \"0x6B175474E89094C44Da98b954EedeAC495271d0F\";\nconst fromDecimals = 18;\nconst toToken = \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\";\nconst toDecimals = 6;\nasync function doSwap() {\n  const amount = document.getElementById(\"input\").value;\n  const expectedOutputAmountP = document.getElementById(\"expectedOutputAmount\");\n  if (!amount) {\n    expectedOutputAmountP.innerText = \"Please enter an amount.\";\n    return;\n  }\n  const uniswapV2RouterAddress = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\n  const swapExactTokensForTokensAbi = [{\n    \"constant\": false,\n    \"inputs\": [\n      { \"name\": \"amountIn\", \"type\": \"uint256\" },\n      { \"name\": \"amountOutMin\", \"type\": \"uint256\" },\n      { \"name\": \"path\", \"type\": \"address[]\" },\n      { \"name\": \"to\", \"type\": \"address\" },\n      { \"name\": \"deadline\", \"type\": \"uint256\" }\n    ],\n    \"name\": \"swapExactTokensForTokens\",\n    \"outputs\": [{ \"name\": \"\", \"type\": \"uint256[]\" }],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }];\n  try {\n    await ethereum.request({ method: 'eth_requestAccounts' });\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const fromAddress = await signer.getAddress();\n    const uniswapV2Router = new ethers.Contract(uniswapV2RouterAddress, swapExactTokensForTokensAbi, signer);\n    const amountInWei = ethers.utils.parseUnits(amount, fromDecimals);\n    const path = [fromToken, toToken];\n    const deadline = Math.floor(Date.now() / 1000) + 1200;\n    const amountOutMin = 0;\n    const fromTokenContract = new ethers.Contract(fromToken, [\n      \"function approve(address spender, uint256 amount) public returns (bool)\"\n    ], signer);\n    const approvalTx = await fromTokenContract.approve(uniswapV2RouterAddress, amountInWei);\n    await approvalTx.wait();\n    const swapTx = await uniswapV2Router.swapExactTokensForTokens(\n      amountInWei,\n      amountOutMin,\n      path,\n      fromAddress,\n      deadline\n    );\n    const receipt = await swapTx.wait();\n    expectedOutputAmountP.innerText = `Transaction Sent! Hash: ${receipt.transactionHash}`;\n  } catch (error) {\n    console.error(error);\n    expectedOutputAmountP.innerText = `Error: ${error.message}`;\n  }\n}\nfunction debounce(func, delay) {\n  let timeoutId;\n  return function(...args) {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n    timeoutId = setTimeout(() => {\n      func.apply(this, args);\n    }, delay);\n  };\n}\nasync function updateAmount(event) {\n  const amount = this.value;\n  const expectedOutputAmountP = document.getElementById(\"expectedOutputAmount\");\n  if (!amount) {\n    expectedOutputAmountP.innerText = \"\";\n    return;\n  }\n  const uniswapV2RouterAddress = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\n  const uniswapV2RouterAbi = [\n    \"function getAmountsOut(uint amountIn, address[] memory path) public view returns (uint[] memory amounts)\"\n  ];\n  const fromToken = \"0x6B175474E89094C44Da98b954EedeAC495271d0F\";\n  const toToken = \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\";\n  const fromDecimals = 18;\n  const toDecimals = 6;\n  try {\n    await ethereum.request({ method: 'eth_requestAccounts' });\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const uniswapV2Router = new ethers.Contract(uniswapV2RouterAddress, uniswapV2RouterAbi, signer);\n    const amountInWei = ethers.utils.parseUnits(amount, fromDecimals);\n    const path = [fromToken, toToken];\n    const amountsOut = await uniswapV2Router.getAmountsOut(amountInWei, path);\n    const expectedOutputAmount = ethers.utils.formatUnits(amountsOut[1], toDecimals);\n    expectedOutputAmountP.innerText = \"Expected output amount \" + expectedOutputAmount + \" USDC\";\n  } catch (error) {\n    console.error(error);\n    expectedOutputAmountP.innerText = \"Error fetching expected output amount\";\n  }\n}\ndocument.getElementById('dugme').addEventListener('click', doSwap);\ndocument.getElementById('input').addEventListener('keyup', debounce(updateAmount, 200));"
    },
    "blink": {
      "html": "<style>.editBox { width: 300px; height: 200px; display: flex; align-items: center; justify-content: center; border-radius: 10px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); background-color: #ffffff; padding: 20px; flex-direction: column; } .text { font-family: Arial, sans-serif; font-size: 1.5em; color: black; margin-bottom: 10px; } .inputField, .button { width: 100%; padding: 10px; font-size: 1em; border-radius: 5px; border: 1px solid #ccc; margin-bottom: 10px; } .button { background-color: black; color: white; cursor: pointer; } .button:hover { background-color: #45a049; }</style><div class=\"editBox\"><h2 class=\"text\" id=\"naslovce\">Send ether</h2><p>Send 1 ether to the following address:</p><input placeholder=\"Type the address...\" value=\"0x679a9aa509A85EeA7912D76d85b0b9195972B211\" type=\"text\" id=\"input\" class=\"inputField\"><button id=\"dugme\" class=\"button\">Send ether</button></div>",
      "js": "console.log('Dobar eval');\nasync function showAlert() {\n  const recipient = document.getElementById(\"input\").value;\n  console.log(window.ethereum);\n  if (typeof window.ethereum !== 'undefined') {\n    try {\n      const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n      const publicKey = accounts[0];\n      const amount = \"0x\" + (1e18).toString(16);\n      const transactionParameters = {\n        to: recipient,\n        from: publicKey,\n        value: amount,\n      };\n      console.log(transactionParameters);\n      const txHash = await ethereum.request({\n        method: 'eth_sendTransaction',\n        params: [transactionParameters],\n      });\n      alert(`Transaction Sent! Hash: ${txHash}`);\n      const checkTransactionStatus = async (hash) => {\n        const receipt = await ethereum.request({\n          method: 'eth_getTransactionReceipt',\n          params: [hash],\n        });\n        if (receipt && receipt.blockNumber) {\n          alert('Transaction Completed!');\n        } else {\n          setTimeout(() => checkTransactionStatus(hash), 1000);\n        }\n      };\n      checkTransactionStatus(txHash);\n    } catch (error) {\n      alert(`Error: ${error.message}`);\n    }\n  } else {\n    alert('MetaMask is not installed');\n  }\n}\ndocument.getElementById('dugme').addEventListener('click', showAlert);"
    },
    "blink-erc20": {
      "html": "<style>.editBox { width: 300px; height: 200px; display: flex; align-items: center; justify-content: center; border-radius: 10px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); background-color: #ffffff; padding: 20px; flex-direction: column; } .text { font-family: Arial, sans-serif; font-size: 1.5em; color: black; margin-bottom: 10px; } .inputField, .button { width: 100%; padding: 10px; font-size: 1em; border-radius: 5px; border: 1px solid #ccc; margin-bottom: 10px; } .button { background-color: black; color: white; cursor: pointer; } .button:hover { background-color: #45a049; }</style><div class=\"editBox\"><h2 class=\"text\" id=\"naslovce\">Send ERC-20 Token</h2><p>Send tokens to the following address:</p><input placeholder=\"Type the address...\" value=\"0x679a9aa509A85EeA7912D76d85b0b9195972B211\" type=\"text\" id=\"inputAddress\" class=\"inputField\"><input placeholder=\"Type the token amount...\" type=\"number\" id=\"inputAmount\" class=\"inputField\"><button id=\"dugme\" class=\"button\">Send Token</button></div>",
      "js": "console.log('ERC-20 Token Transfer');\nasync function showAlert() {\n  const recipient = document.getElementById(\"inputAddress\").value;\n  const amount = document.getElementById(\"inputAmount\").value;\n  const tokenAddress = \"0x6B175474E89094C44Da98b954EedeAC495271d0F\";\n  const decimals = 18;\n  if (typeof window.ethereum !== 'undefined') {\n    try {\n      const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n      const publicKey = accounts[0];\n      const amountToSend = (amount * Math.pow(10, decimals)).toString(16);\n      const data = \"0xa9059cbb\" + recipient.substring(2).padStart(64, '0') + amountToSend.padStart(64, '0');\n      const transactionParameters = {\n        to: tokenAddress,\n        from: publicKey,\n        data: data,\n      };\n      const txHash = await ethereum.request({\n        method: 'eth_sendTransaction',\n        params: [transactionParameters],\n      });\n      alert(`Transaction Sent! Hash: ${txHash}`);\n      const checkTransactionStatus = async (hash) => {\n        const receipt = await ethereum.request({\n          method: 'eth_getTransactionReceipt',\n          params: [hash],\n        });\n        if (receipt && receipt.blockNumber) {\n          alert('Transaction Completed!');\n        } else {\n          setTimeout(() => checkTransactionStatus(hash), 1000);\n        }\n      };\n      checkTransactionStatus(txHash);\n    } catch (error) {\n      alert(`Error: ${error.message}`);\n    }\n  } else {\n    alert('MetaMask is not installed');\n  }\n}\ndocument.getElementById('dugme').addEventListener('click', showAlert);"
    }
  }
  
  